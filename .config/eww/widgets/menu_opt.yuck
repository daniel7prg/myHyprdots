;; system sliders
(defwidget sys_sliders []
  (box :class "genwin" :vexpand "false" :hexpand "false" :width 365
	(box :class "slidersbox" :orientation "v" :spacing 10 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
	  (box :class "volume_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :width 30 :onclick "scripts/audio --toggle-vol" 
          (label :class "iconvolume" :text VOLUMEICON))
		(scale :min 0 :max 100 :value VOLUME :active "true" :onchange "scripts/audio --set-vol {}")
    (label :class "percent" :text "${VOLUME}%"))
      (box :class "mic_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :width 30 :onclick "scripts/audio --toggle-mic" 
          (label :class "iconmic" :text MICICON))
		(scale :min 0 :max 101 :value MIC :active "true" :onchange "scripts/audio --set-mic {}") 
    (label :class "percent" :text "${MIC}%"))
      (box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :width 30 :onclick "" 
		  (label :width 30 :class "iconbright" :text "󰃠"))
        (scale :min 0 :max 101 :value BLIGHT :active "true" :onchange "scripts/brightness --set {}")
        (label :class "percent" :text "${BLIGHT}%")))))

;; battery
(defwidget battery []
  (box :class "genwin" :vexpand "false" :hexpand "false" :width 65
    (box :class "battery" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(label :class "baticon" :text BATTERYICON)
        (label :class "batinfo" :text BATTERY))))

;; network
(defwidget network []
  (box :class "genwin" :vexpand "false" :hexpand "true" :orientation "h" :width 200
	(eventbox :class "${net_state == 'loopback' ? 'disable' : 'btn_net'}" :onclick "scripts/network --toggle" 
          :onrightclick "sh -c '(sleep 0.5s; '$HOME/.config/eww/scripts/wifi')' & disown \
                          && rm $HOME/.cache/eww_launch.menu_opt && eww close menu_opt" :cursor "pointer"
      (label :class "network" :text NET))))

;; bluetooth
(defwidget bluetooth []
  (box :class "genwin" :vexpand "false" :hexpand "false" :width 60
	(eventbox :class "${bth_state == 'inactive' ? 'disable' : 'btn_bluet'}" :cursor "pointer"
            :onclick "scripts/bluetooth --toggle" :onrightclick "scripts/bluetooth --gui"
      (label :class "bluetic" :text iconbth))))

;; Power Button
(defwidget powerbutton []
  (box :class "genwin" :vexpand "false" :hexpand "false" :width 60
	(eventbox :class "btn_poweroff" :cursor "pointer"
            :onclick "sh -c '(sleep 0.5s; wlogout --protocol layer-shell)' & disown \
   && rm $HOME/.cache/eww_launch.menu_opt && eww close menu_opt" 
      (label :class "poweric" :text " ⏻ "))))
        

;;system
(defwidget system []
  (box :space-evenly "false" :orientation "v" :spacing 10 :width 400
    (box :class "row" :orientation "h" :space-evenly "false" :spacing 10 :height 60
      (network)
      (bluetooth)
      (powerbutton))
    (box :class "row" :orientation "h" :space-evenly "false" :spacing 10 :height 60
      (battery)
      (sys_sliders))
  )
)

;; Music
(defwidget music []
    (box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
		  
      (box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
        (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
          (box :orientation "v" :width 80
	  	    (label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
	  	    (label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)))

		(box :orientation "h" :spacing 30 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
		  (eventbox :class "btn_prev" :onclick "scripts/music --prev" :cursor "pointer"
        (label :class "prev" :text "󰙤"))
		  (eventbox :class "btn_play" :onclick "scripts/music --toggle" :cursor "pointer"
        (label :class "stat" :text STATUS))
		  (eventbox :class "btn_next" :onclick "scripts/music --next" :cursor "pointer"
        (label :class "nxt" :text "󰙢")))))

;; Sysinfo
(defwidget sysinfo []
  (box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "bx_sys" :space-evenly "false"
      (label :text "System Info")
      (box :class "bx_sys_per" :space-evenly "true" :vexpand "false" :hexpand "false"
        (circular-progress 
          :value {EWW_RAM.used_mem_perc} :class "sysbar" :thickness 4
          :tooltip "USED ${round(EWW_RAM.used_mem / 1048576, 2)}MB"
          (label :class "txt_sys" :text "RAM "))
      )
      (box :class "bx_sys_per" :space-evenly "true" :vexpand "false" :hexpand "false"
        (circular-progress 
          :value {EWW_DISK["/"].used_perc} 
          :class "sysbar" 
          :thickness 4
          :limit-width 2
          :tooltip "USED ${round(EWW_DISK["/"].used_perc, 2)}%"
          (label :class "txt_sys" :text "DISK 󰋊"))
      )
      (box :class "bx_sys_per" :space-evenly "true" :vexpand "false" :hexpand "false"
        (circular-progress 
          :value {EWW_CPU.avg} 
          :class "sysbar" 
          :thickness 4
          :limit-width 2
          :tooltip "USED ${round(EWW_CPU.avg, 0)}%"
          (label :class "txt_sys" :text "CPU "))
      )
      (box :class "bx_sys_per" :space-evenly "true" :vexpand "false" :hexpand "false"
        (circular-progress 
          :value {EWW_TEMPS.ACPITZ_TEMP1}
          :class "sysbar" 
          :thickness 4
          :limit-width 2
          :tooltip "${EWW_TEMPS.ACPITZ_TEMP1}󰔄"
          (label :class "txt_sys" :text "TEMP 󱌥"))
      )
    )
  )
)

;; MENU_OPT
(defwidget _menuopt []
  (box :class "background_mn" :space-evenly "false" :orientation "v" :spacing 15 :width 400
    (system)
    (music)
    (sysinfo)))